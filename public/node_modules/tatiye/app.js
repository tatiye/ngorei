import React, { useContext,useEffect, useState,useRef } from 'react';

import * as ImagePicker from 'expo-image-picker';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  useColorScheme,
  View, 
  Text, 
  TextInput, 
  StyleSheet,
  Keyboard,
  Image,
  TouchableOpacity
} from 'react-native';

import { useNavigation } from '@react-navigation/native';
import * as Location from 'expo-location';
import * as Speech from 'expo-speech';
import { BarCodeScanner } from 'expo-barcode-scanner';
import { shareAsync } from 'expo-sharing';
import * as MediaLibrary from 'expo-media-library';
import { Camera, CameraType } from 'expo-camera';
import FeatherIcon from 'react-native-vector-icons/Feather';
import {BASE_URL,BASE_API,PATROUTES,outV2,defaultCSS,outV3,firebaseConfig} from "../../package/config.js";
import myInput  from '../../package/Components/Input';
import myButtons  from '../../package/Components/Buttons/index';
import ButtonsAction  from '../../package/Components/Buttons/Action';
import myIcon  from '../../package/Components/icons/index';
import myMaps  from '../../package/Components/Maps/index';
import myCards  from '../../package/Components/Cards/index';
import myContents  from '../../package/Components/Content/index';
import myImg  from '../../package/Components/images/index';
import {Style}  from '../../package/Components/Style/index';
import {uIdDemo}  from '../../package/Components/Avatars';
import myHeader  from '../../package/Components/header/index';
import myLoader  from '../../package/Components/Content/Loader';
import MyModal  from '../../package/Components/modal/index';
import MyBadge  from '../../package/Components/Content/Badge';
import { init,myMenu }  from '../../package/Storage/index';
import MyDialog from '../../package/Components/modal/dialog';
import MyFacebook from '../../package/Components/Video/facebook';
import MyYoutube from '../../package/Components/Video/youtube';


import { initializeApp } from 'firebase/app';
import { getDatabase } from 'firebase/database';

let tatiyeNet = {
      api       :BASE_API,
      base      :BASE_URL,
      images    :BASE_URL+'/images',
      drive     :BASE_URL+'/drive',
      assets    :BASE_URL+'/assets/index.json',
      logo      :BASE_URL+'/images/Logo.png',
      apps      :BASE_URL+'/screens',
      signin    :BASE_API+'/login',
      signup    :BASE_API+'/registrasi',
      restProfil:BASE_API+'/profil',
      background :defaultCSS.background,
      border :defaultCSS.border,
      color :defaultCSS.color,
      txcolor :defaultCSS.txcolor,
};
const myID=[];
export default tatiyeNet;
export const uIds=uIdDemo;
export const Input=myInput;
export const Buttons=myButtons;
export const Icon=myIcon;
export const MIcon=myIcon;
export const Header=myHeader;
export const Cards=myCards;
export const Content=myContents;
export const Maps=myMaps;
export const Images=myImg;
export const Img=myImg;
export const BtnAction=ButtonsAction;
export const css=Style;
export const Loader=myLoader;
export const Badge=MyBadge;
export const Dialog=MyDialog;
export const VideoFacebook=MyFacebook;
export const VideoYoutube=MyYoutube;

export const Storage = function () {
  return{
    init:function(){
      return new init();
    },
    menu:function(){
      return new myMenu();
    },
    
  }
}


// export const myModal=myModal;
export const QRScanned = function () {
    const [hasPermission, setHasPermission] = React.useState(false);
    const [scanData, setScanData] = React.useState();
      useEffect(() => {
        (async() => {
          const {status} = await BarCodeScanner.requestPermissionsAsync();
          setHasPermission(status === "granted");
        })();
      }, []);
  const handleBarCodeScanned = ({type, data}) => {
       let dataSc={
            data: data,
            type: type,
       }
       setScanData(dataSc)
  };
    return {
        Scanner: function () {
        return (
         !scanData &&
         <BarCodeScanner 
           style={StyleSheet.absoluteFillObject}
           onBarCodeScanned={scanData ? undefined :handleBarCodeScanned}/>
          )
        },
        permission: function (message='') {
              if (!hasPermission) {
              return (
                <View style={{ 
                   flex: 1,
                   backgroundColor: 'transparent',
                   alignItems: 'center',
                   justifyContent: 'center',}}>
                  <Text>Harap berikan izin kamera ke aplikasi.</Text>
                </View>
              );
            }
        },
        CodeScanned:function (ref) {
          if (ref) {
            setScanData(undefined);
          }
          return scanData
        }
    }
}



export const speak = function (messages) {
  if (messages) {
    return Speech.speak(messages);
  } else {
    return Speech.stop();
  }
} 
export const DBfirebase = function () {
  const app = initializeApp(firebaseConfig);
  const db = getDatabase(app);
  return db 
}

 export const Rest = function (uId,meth="POST") {
  return {
     dbRest: function (versi,select,fileName){
          if (versi=='v1') {
            var apiVersi=tatiyeNet.api+'/v1/react/'+fileName.select+"/"+fileName.tabel;
          } else if (versi=='v3') {
             var apiVersi=tatiyeNet.api+'/v3/'+fileName;
          } else {
             var apiVersi=tatiyeNet.api+'/v3/react/'+"/"+fileName.tabel;
          }
          var myHeaders = new Headers();
          myHeaders.append("Authorization",uId.authorization);
          myHeaders.append("userid", uId.userid);
          myHeaders.append("Content-Type", "application/json");
          var requestOptions = {
            method: meth,
            headers: myHeaders,
            body: JSON.stringify(select),
            redirect: 'follow'
          };
          let nEntri ={
            "url"        :apiVersi,
            "request"    :requestOptions,
           };

           return {
               send: function() {
                  return fetch(nEntri.url, nEntri.request).then(response => response.json())
             }
           };
     }

  }
 }
export const Fetch = function (uId,tabelRaw,request='') {
    const [render,list]    =useState([]);
    const [usePublic,listPublic]    =useState([]);
      const db=new auth(uId);
      if (request) {
         var setRequest=request
      } else {
        var setRequest={
        "page":1,
        "limit":20,
        "keywords":'',
      }
      }
      const ref=db.then({
       tabel:tabelRaw,
       request :setRequest
    })
      useEffect(() => {
       bankData();
     }, []);
      const bankData = async () => {
        fetch(ref.url, ref.request)
        .then(response => response.json())
        .then(result => {
          listPublic(result)
          list(result.storage)
        }).catch(error => console.log('error', error)); 
      };
    return {
        result: function () {
          return render
        },
        public: function () {
            return usePublic 
        },
        reload: function () {
           return bankData()
        },
        delete: function (versi,select,meth='POST') {
          const useRest= new Rest(uId,meth)
          let merselect= Object.assign({}, {"select":"delete"},select);
          let mer= Object.assign({}, {"userid":uId.user_id},select.request);
          return useRest.dbRest(versi,mer,merselect)
        },
        Form: function (versi,select,meth='POST') {
          const useRest= new Rest(uId,meth)
          let mer= Object.assign({}, {"userid":uId.user_id},select.request);
          return useRest.dbRest(versi,mer,select)
        }
    }
}
export const Activity = function (uId) {
      const [render,listData]=React.useState([]);
       useEffect(() => {
                setId();
       }, []);
       const setId = async () => {
         const useUid = await AsyncStorage.getItem('activity');
         listData(JSON.parse(useUid));
       }
    return {
        send: function () {
          AsyncStorage.setItem('activity', JSON.stringify(uId));
        },
        render: function () {
            return render 
        }
    }
}

export const activeUID = function (render,select='') {
    return {
        mode:function(style='') {
         const bInit=new Mode({
            style:style,
            color:"#222222",
            background:"#e8ecf4",
            bgColor: '#fff',
            border:"#e8e8e8"
           },render.mode,render);
           return bInit.Status();

        }
    }
}
export const SAid = function (key,select='') {
       const [data, getuid] = useState([]);
       const [render,listData]    =useState([]);
       useEffect(() => {
                setId();
       }, []);
       const setId = async () => {
         const useUid = await AsyncStorage.getItem('userData');
         getuid(JSON.parse(useUid));
       }
        const myHeaders = new Headers();
        myHeaders.append("Authorization",data.authorization);
        myHeaders.append("userid", data.user_id);
        const raw = JSON.stringify(data);
        const requestOptions = {
          method: "POST",
          headers: myHeaders,
          body: raw,
          redirect: "follow"
        };
       useEffect(() => {
            setDataId();
       }, []);
       const setDataId = async () => {
           fetch(tatiyeNet.api+"/v3/profil/"+key+"/uid", requestOptions)
           .then((response) => response.json())
           .then((result) => { 
             listData(result);
           }).catch((error) => console.error(error));
        }
    return {
        auth: function () {
          return data
        },
        refresh: function () {
          return  setDataId();
        },
        indexOn: function () {
           setTimeout(async () => {
               return  setDataId();
           },8000);

        },
        indikator:function(){
          // if (select) {
          //    const save= new Activity(render);
          //    save.send() 
          // }

        },
        user:function() {
          // if (render) {
          //   return render
          // } else {
            // const save= new Activity(render);
           return render
          // }
        },
        mode:function(style='') {
         const bInit=new Mode({
            style:style,
            color:"#222222",
            background:"#e8ecf4",
            bgColor: '#e8ecf4',
            border:"#e8e8e8"
          },render.mode,render);
           return bInit.Status();
        }
    }
}
export const Modal = function (data) {
    let this_uId           =data.auth
    let this_carouse       =data.carouse
    const [isModalVisible, setModalVisible] = useState(false);
    const [isModalData, setModalData] = useState();
    return {
        // users,
        show: function (value) {
           setModalData(value);
           setModalVisible(true);
        },
        visible: function (message) {
            return isModalVisible 
        },
        onCancel: function (message) {
             setModalVisible(message);
        },
        tempalte: function (message="") {
            return (
            <MyModal
                uId={this_uId}
                carouse={this_carouse}
                item={isModalData}
                show="Up"
                backdrop="black"
                type="label"
                visible={this.visible()}
                onCancel={()=>this.onCancel(false)}
              />
            )
        }
    }
}






export const Geolocation= function (data) {
    let this_uId           =data.authorization
    let this_userid        =data.authorization.user_id
    let this_authorization =data.authorization.authorization
    const [location, setLocation] =React.useState();
    const [address, setAddress]   =React.useState()
    Location.setGoogleApiKey(data.apiKey);
    useEffect(() => {
      const getPermissions = async () => {
        let { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== 'granted') {
          console.log("Please grant location permissions");
          return;
        }
        let currentLocation = await Location.getCurrentPositionAsync({});
        setLocation(currentLocation);
      };
      getPermissions();
    }, []);
    return {
        // users,
        push: async () => {
          const reverseGeocodedAddress = await Location.reverseGeocodeAsync({
            longitude: location.coords.longitude,
            latitude: location.coords.latitude
          });
          var row=reverseGeocodedAddress[0];
           const cordinat = {
               longitude: location.coords.longitude,
               latitude: location.coords.latitude,
               lokasi:row.region +','+row.subregion +','+row.city +','+row.district    
           };
             let mer= Object.assign({}, reverseGeocodedAddress[0],cordinat);
             setAddress(mer)
        },
        pushData: async () => {
          const reverseGeocodedAddress = await Location.reverseGeocodeAsync({
            longitude: location.coords.longitude,
            latitude: location.coords.latitude
          });
          var row=reverseGeocodedAddress[0];
           const cordinat = {
               longitude: location.coords.longitude,
               latitude: location.coords.latitude,
               lokasi:row.region +','+row.subregion +','+row.city +','+row.district    
           };
             let mer= Object.assign({}, reverseGeocodedAddress[0],cordinat);
             setAddress(mer)
        },
        address: function () {
            return address 
        },
        distance: function (alet) {
          if (address) {
          var tance=locationDistance(
               alet[0],
               alet[1],
               address.latitude,
               address.longitude,
              )

            let merged= Object.assign({}, address,{distance:tance});
            return merged 
          } else {
            return false 
          }

        },
        From: function (data) {
            let merged= Object.assign({}, address,data);
            return merged 
        }

    }
}
export class Mode {
    constructor(castom,data,uId=0) {
        this.castom    =castom;
        this.mode      =data;
        this.uId       =uId;
    } 
    Status() {
      if (this.mode=='dark') {
         return {
          "id": this.uId,
          "icon":'moon',
          "header":"Dark",
          "title":"dark",
          "content":"light-content",
          "color":"#fff",
          "background":"#242c40",
          "bgColor"   :'#3b4863a3',
          "bgColor2"   :'#3b4863a3',
          "border":"#3b486370",
           "safeArea":{
             flex: 1, 
             backgroundColor :"#242c40"
           },
           "txcolor":{
              color:"#fff"
          },
          "shadow":{
              backgroundColor: '#3b4863a3',
              padding:10,
              marginTop:1,
              marginBottom:0,
              borderRadius:8,
              shadowColor: '#3b4863a3',
              shadowOffset: {
                 width: 0,
                 height:1,
               },
               shadowOpacity: 0.2,
               shadowRadius: 1.41,
               elevation: 2,
             }
         };
      } else {
         return {
          "id": this.uId,
          "icon":'sun',
          "header":"Light",
          "title":"light",
          "content":"dark-content",
          "color"      :this.castom.color,
          "background" :this.castom.background,
          "bgColor"    :this.castom.bgColor,
          "bgColor2"   :this.castom.background,
          "border"     :this.castom.border,
           "safeArea":{
             flex: 1,
             backgroundColor :this.castom.background 
           },
           "txcolor":{
              color:this.castom.color
          },
          "shadow":{
              backgroundColor: this.castom.bgColor,
              padding:10,
              marginTop:1,
              marginBottom:0,
              borderRadius:8,
              shadowColor: this.castom.bgColor,
              shadowOffset: {
                 width: 0,
                 height:1,
               },
               shadowOpacity: 0.2,
               shadowRadius: 1.41,
               elevation: 2,
             }
         };
      }
    }
    Content() {
      if (this.mode=='dark') {
         return 'light-content';
      } else {
         return 'dark-content';
      }
    }
    Css() {
      if (this.mode=='dark') {
         return {
           "SafeArea":{
             flex: 1, 
             backgroundColor :"#242c40"
           },
           "txcolor":{
              color:"#fff"
             },
         };
      } else {
         return {
           "SafeArea":{
             flex: 1, 
           },
           "txcolor":false,
         };
      }
    }
    modeSend(mode) {
        AsyncStorage.mergeItem(
          'userMode',
          JSON.stringify(mode),
        );
    }
    ascSend() {
          const useUidMode = AsyncStorage.getItem('userMode');
          getMode(JSON.parse(useUidMode));
    }
    Send() {
      if (this.mode=='dark') {
         var val=1
      } else {
         var val=0
      }
        AsyncStorage.mergeItem(
          'userData',
          JSON.stringify({...this.uId.user_id, "mode":this.mode,"value":val}),
        );
    }
}

// export const Fetch= function (data) {
//   return true
// }
export class auth {
    constructor(data) {
        this.uId      =data
        this.userid   =data.user_id
        this.authorization =data.authorization
    } 
    then(send) {
      var myHeaders = new Headers();
      myHeaders.append("Authorization",this.authorization);
      myHeaders.append("userid", this.userid);
      myHeaders.append("Content-Type", "application/json");
      var requestOptions = {
        method: 'POST',
        headers: myHeaders,
        body: JSON.stringify(send['request']),
        redirect: 'follow'
      };
      let Entri ={
        "url"         :tatiyeNet.api+"/v3/"+outV3.data[send['tabel']],
        "request"    :requestOptions,
       };
       return Entri;
    }
    fetch(url,request) {
       let [getResponse, setResponse] =React.useState({});
       const FromApiAsync = async () => {
           fetch(url, request)
               .then((response)=>response.json()) 
               .then((response)=>{
                 setResponse(response);
                }).catch((error) => {
              });   
        };
          useEffect(() => {
            FromApiAsync()
           }, []); 
          if (getResponse) {
           return getResponse
          } else {
           return ''
          }
        }
     upload(e) {
        var image=e.fileSystem;
        const fileName = image.split('/').pop();
        const fileType = "image/"+image.split('.').pop();
        const myHeaders = new Headers();
        myHeaders.append("Authorization",this.authorization);
        myHeaders.append("key", e.data.key);
        myHeaders.append("userid", this.userid);
        const formdata = new FormData();
        formdata.append(e.thumbnail, {
             name: fileName,
             type:fileType,
             uri: Platform.OS === 'ios' ? image.replace('file://', '') : image,
        });
        formdata.append("storage",JSON.stringify(e.data));
        const requestOptions = {
          method: "POST",
          headers: myHeaders,
          body: formdata,
          redirect: "follow"
        };
        let Entri ={
         "url"         :tatiyeNet.api+"/v3/"+outV3.data[e['tabel']],
         "request"     :requestOptions,
        };
        return Entri;
    }
}

export const Ngorei = function (keyID,meth="POST") {
        const [data, getuid] = useState([]);
        const [render,listData]    =useState();
        useEffect(() => {
                 setId();
        }, []);
        const setId = async () => {
          const useUid = await AsyncStorage.getItem('userData');
          getuid(JSON.parse(useUid));
        }
  return {
     user:function(){
        const myHeaders = new Headers();
        myHeaders.append("Authorization",data.authorization);
        myHeaders.append("userid", data.user_id);
        const raw = JSON.stringify(data);
        const requestOptions = {
          method: "POST",
          headers: myHeaders,
          body: raw,
          redirect: "follow"
        };
          return fetch(tatiyeNet.api+"/v3/profil/"+keyID+"/uid", requestOptions).then((response) => response.json())
     },
     mode:function(id,style='') {
         const bInit=new Mode({
            style:style,
            color:"#222222",
            background:"#e8ecf4",
            bgColor: '#fff',
            border:"#e8e8e8"
          },id.mode,id);
           return bInit.Status();
        },

     fetch: function (versi,select=''){
          var myHeaders = new Headers();
          myHeaders.append("Authorization",data.authorization);
          myHeaders.append("userid", data.user_id);
          myHeaders.append("Content-Type", "application/json");
          if (select) {
            var reg=select
          } else {
            var reg={
              userid:data.userid
            }
          }
          var requestOptions = {
            method: meth,
            headers: myHeaders,
            body: JSON.stringify(reg),
            redirect: 'follow'
          };
          let nEntri ={
            "url"         :tatiyeNet.api+"/v3/"+outV3.data[versi],
            //"url"         :assets.api+"/v3/absen/0.1/navigasi",
            "request"    :requestOptions,
           };

           return {
               send: function() {
                  return fetch(nEntri.url, nEntri.request).then(response => response.json())
             }
           };
     }

  }
 }


export const From = function (data,arr='',arr2='') {
    if (arr2) {
     var dataArr=arr2;
    } else {
     var dataArr=arr;

    }
    let this_uId      =data
    let this_userid   =data.user_id
    let this_authorization =data.authorization
    const [getResponse, setResponse] =React.useState(dataArr);
    const [errorResponse, seterrorResponse] =React.useState({});
    const [resultResponse, setresultResponse] =React.useState(dataArr);
    const [loadingResponse, setLoadingResponse] = React.useState(false);
    const navigation = useNavigation();
    return {
        entri: function (value='') {
          if (value) {
           return value
          } else {
          return arr
          }
        },
        field: function (row) {
          return setResponse(row)
        },
        value: function (data='') {
           return getResponse
        },
        error: function (data='') {
           return errorResponse
        },

        loading: function (data) {
           if (data) {
             setLoadingResponse(true)
           }
           return loadingResponse
        },
        response: function (data) {
          if (data.hasil=='sukses') {
              
               seterrorResponse(false)
          } else if (data.hasil=='error') {
               seterrorResponse(data.error) 
          }
          setLoadingResponse(false)
          return data;
        },
        clear: function (data='') {
          setResponse(arr)
        },
        input: function (row) {
            return setResponse(row)
        },
        request:function (data) {
            var myHeaders = new Headers();
            myHeaders.append("Authorization",this_authorization);
            myHeaders.append("key", data.key);
            myHeaders.append("userid", this_userid);
            myHeaders.append("Content-Type", "application/json");
            myHeaders.append("Cookie", "PHPSESSID=pm67veplgfc8gitnp5jrpa01u7");
            var requestOptions = {
              method:  "POST",
              headers: myHeaders,
              body: JSON.stringify(data.action),
              redirect: 'follow'
            };
            let send ={
             "url"         :tatiyeNet.api+"/v3/"+outV3.data[data['tabel']],
             //"url"         :assets.api+"/v3/profil/0.2/demo",
             "request"     :requestOptions,
            };
            return send;
        },
        method: function (data) {
            const send =this.request(data);
            return {
                send: function () {
                     const data= fetch(send.url, send.request).then(response => response.json())
                     return data
                },
                request: function () {
                   return send; 
                }
            };
           },
          onValue: function(tabel,add='add'){
               Keyboard.dismiss();
               var fetch=this.method({
                "key"    :add,
                "tabel"  :tabel,
                "action" :getResponse
               })
              fetch.send().then(result => {
                  const response=this.response(result)  
                  setresultResponse(result)
              }).catch(error => console.log('error', error)); 
              return {
                   result:function () {
                     return getResponse;
                    }
              } 
           },
           asyncStorage:function (item,result) {
              AsyncStorage.setItem(item, JSON.stringify(result))
           },
           navigate:function (item,result='') {
              if (item) {
                 navigation.navigate(item);
              } else {
                 navigation.navigate(item,result);
              }
            
           }
    }
}

export const Upload = function (data) {
    const [image, setImage] = useState(null);
    const [useFile, setfileSystem] = useState();
    let this_uId      =data
    let this_userid   =data.user_id
    let this_authorization =data.authorization
    return {
        take: function () {
            const pickImage = async () => {
            let result = await ImagePicker.launchImageLibraryAsync({
              mediaTypes: ImagePicker.MediaTypeOptions.All,
              allowsEditing: true,
              aspect: [4, 3],
              quality: 0.75,
            });
            if (!result.canceled) {
             setImage(result.assets[0].uri); 
              setfileSystem(true) 
            }
          };
         return pickImage;
        },
        picture: function (key) {
            if (image) {
              var photo=image;
            } else {
              var photo=key;
            }
            return photo;
        },
        useFile: function (key='') {
            if (key) {
               return false;
               setfileSystem(false)   
            } else {
               return useFile;
            }
        },
        ascStorage: function (query) {
             const db=new auth(data);
             const output=db.upload(query)
             fetch(output.url, output.request)
               .then((response) => response.json())
               .then((result) => {
                 AsyncStorage.setItem(
                     'userData',
                    JSON.stringify(result.data),    
                  );
                 setfileSystem(false)   
             }).catch((error) => console.error(error));
        }
    }
}




export function images(data) {
  return tatiyeNet.images+'/'+data;
}
export function usenetStorage(data) {
    var myHeaders = new Headers();
     myHeaders.append("Authorization",data.token.authorization);
     myHeaders.append("key", data.key);
     myHeaders.append("userid", data.token.user_id);
     myHeaders.append("Content-Type", "application/json");
     myHeaders.append("Cookie", "PHPSESSID=pm67veplgfc8gitnp5jrpa01u7");
     var requestOptions = {
       method:  data.method,
       headers: myHeaders,
       body: JSON.stringify(data.formaction),
       redirect: 'follow'
     };
     let Entri ={
      "url"         :tatiyeNet.api+"/v2/"+outV2.storage[data.storage][0],
      "request"     :requestOptions,
     };
   
      return Entri;





}

export function apiV3(row,userid) {
     let storage= {
            "limit":row[1],
            "page":row[2],
            "keywords":row[3],
      }
      var myHeaders = new Headers();
      myHeaders.append("Authorization","e.authorization");
      myHeaders.append("userid", userid);
      myHeaders.append("Content-Type", "application/json");
      myHeaders.append("Cookie", "userid=pm67veplgfc8gitnp5jrpa01u7");
      var requestOptions = {
        method: 'POST',
        headers: myHeaders,
        body: JSON.stringify(storage),
        redirect: 'follow'
      };
      let Entri ={
       "url"         :tatiyeNet.api+"/v3/"+outV3.data[row[0]],
       "request"    :requestOptions,
      };
       return Entri;

}



export function usenetFetchID(row,method='POST') {
      let storage= {
             "limit":1,
             "page":1,
             "where":"id="+row[2],
             "keywords":''
       }
       var myHeaders = new Headers();
       myHeaders.append("Authorization",row[1]['access_token']);
       myHeaders.append("userid", row[1]['user_id']);
       myHeaders.append("Content-Type", "application/json");
       myHeaders.append("Cookie", "userid=pm67veplgfc8gitnp5jrpa01u7");
       var requestOptions = {
         method: "POST",
         headers: myHeaders,
         body: JSON.stringify(storage),
         redirect: 'follow'
       };
       let Entri ={
        "url"         :tatiyeNet.api+"/v2/"+outV2.storage[row[0]],
        "request"    :requestOptions,
       };
        return Entri;
}
export function usenetFetch(row,userid) {
     let storage= {
            "limit":row[1],
            "page":row[2],
            "keywords":row[3],
      }
      var myHeaders = new Headers();
      myHeaders.append("Authorization","e.authorization");
      myHeaders.append("userid", userid);
      myHeaders.append("Content-Type", "application/json");
      myHeaders.append("Cookie", "userid=pm67veplgfc8gitnp5jrpa01u7");
      var requestOptions = {
        method: 'POST',
        headers: myHeaders,
        body: JSON.stringify(storage),
        redirect: 'follow'
      };
      let Entri ={
       "url"         :tatiyeNet.api+"/v2/"+outV2.storage[row[0]],
       "request"    :requestOptions,
      };
       return Entri;


}



/*
|--------------------------------------------------------------------------
| Initializes useUid 
|--------------------------------------------------------------------------
| Develover Tatiye.Net 2018
| @Date 9/2/2023 3:51:00 PM
*/
export function authUid(id='') {
const myHeaders = new Headers();
 myHeaders.append("Content-Type", "application/json");
 myHeaders.append("key", id);
 myHeaders.append("Cookie", "PHPSESSID=a7flbsattg6dko8e6nu2oqtrfr");
 const raw = JSON.stringify({
   "uid":id
 });
 const requestOptions = {
   method: "POST",
   headers: myHeaders,
   body: raw,
   redirect: "follow"
 };
  let Entri ={
       "url"         :tatiyeNet.api+"/v1/select/profil",
       "request"    :requestOptions,
      };
    return Entri;

}








export function webpage(key='') {
 
  return tatiyeNet.base+'/'+key;
}


export function screens(key='') {
  return tatiyeNet.apps+'/'+key;
}


/*
|--------------------------------------------------------------------------
| Initializes useHandelSave 
|--------------------------------------------------------------------------
| Develover Tatiye.Net 2018
| @Date 9/2/2023 3:51:00 PM
*/
export function useHandelCreate(e) {
    var myHeaders = new Headers();
    myHeaders.append("Authorization",e.authorization);
    myHeaders.append("key", e.primarykey);
    myHeaders.append("userid", e.userid);
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Cookie", "PHPSESSID=pm67veplgfc8gitnp5jrpa01u7");
    var requestOptions = {
      method: 'POST',
      headers: myHeaders,
      body: JSON.stringify(e.storage),
      redirect: 'follow'
    };
    let Entri ={
     "url"         :tatiyeNet.api+"/v2/"+e.token,
     "request"    :requestOptions,
    };

return Entri;
      // console.log(state)
}
/*
|--------------------------------------------------------------------------
| Initializes useHandelSave 
|--------------------------------------------------------------------------
| Develover Tatiye.Net 2018
| @Date 9/2/2023 3:51:00 PM
*/
export function useHandelList(e) {
    var myHeaders = new Headers();
    myHeaders.append("Authorization",e.authorization);
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Cookie", "PHPSESSID=pm67veplgfc8gitnp5jrpa01u7");
    var requestOptions = {
      method: 'POST',
      headers: myHeaders,
      body: JSON.stringify(e.storage),
      redirect: 'follow'
    };
    let Entri ={
     "url"         :tatiyeNet.api+"/v2/"+e.token,
     "request"    :requestOptions,
    };
     return Entri;
}
/*
|--------------------------------------------------------------------------
| Initializes datetimePicker 
|--------------------------------------------------------------------------
| Develover Tatiye.Net 2018
| @Date 9/2/2023 3:51:00 PM
*/
export function datetimePicker(date) {
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();
        var tanggal=year + '/' + (month < 10? '0' : '') + month + '/' + (day < 10? '0' : '') + day ;
 return tanggal;
}
/*
|--------------------------------------------------------------------------
| Initializes localeTime 
|--------------------------------------------------------------------------
| Develover Tatiye.Net 2018
| @Date 9/2/2023 3:51:00 PM
*/
export const textRUndef = function (variables) {
    let filteredArr = variables.filter((elem) => elem !== undefined);
    return {
        texMail: function (key) {
          var unText= filteredArr[key]?filteredArr[key]:''
          if (unText) {
              var tn =unText.split("@");
            return unText.substring(0, 2) + "***@" + tn[1];
          }
        },
        send: function (message) {
            return message 
        }
    }
}






export function localeTime(date) {
   let dateTimeString = date.toLocaleTimeString();
   return dateTimeString;
}

export function explode(text='',str='',str1=1) {
     var tn =text.split(str);
    return tn[str1];
}
export function readMail(text){

     return text.name;
  
}

 export function readmore(str, length=null, ending=null){
    if (length == null) {
       var length = 10;
    }
    if (ending == null) {
       var ending = '...';
    }
    if (str.length > length) {
      return str.substring(0, length - ending.length) + '...';
    } else {
      return str;
    }
  };
/*
|--------------------------------------------------------------------------
| Initializes useHandelHttp 
|--------------------------------------------------------------------------
| Develover Tatiye.Net 2018
| @Date 9/2/2023 3:51:00 PM   
*/
export function usenetUpload(e,thumbnail='thumbnail') {
  var image=e.fileSystem;
  const fileName = image.split('/').pop();
  const fileType = "image/"+image.split('.').pop();
  const myHeaders = new Headers();
  myHeaders.append("Authorization",e.token.access_token);
  myHeaders.append("key", e.key);
  myHeaders.append("userid", e.token.user_id);
  myHeaders.append("Cookie", "PHPSESSID=kjlpomesmv773fuqqif4kchghm");
  const formdata = new FormData();
  formdata.append(thumbnail, {
       name: fileName,
       type:fileType,
       uri: Platform.OS === 'ios' ? image.replace('file://', '') : image,
  });
  formdata.append("storage",JSON.stringify(e.stringify));
  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: formdata,
    redirect: "follow"
  };
  let Entri ={
   "url"         :tatiyeNet.api+"/v2/"+outV2.storage[e.storage][0],
   "request"     :requestOptions,
  };
  return Entri;

}
export function useHandelHttp(e) {
    var myHeaders = new Headers();
    myHeaders.append("Authorization",e.authorization);
    myHeaders.append("key", e.primarykey);
    myHeaders.append("userid", e.userid);
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Cookie", "PHPSESSID=pm67veplgfc8gitnp5jrpa01u7");
    var requestOptions = {
      method:  e.method,
      headers: myHeaders,
      body: JSON.stringify(e.storage),
      redirect: 'follow'
    };
    let Entri ={
     "url"         :tatiyeNet.api+"/v2/"+e.token,
     "request"    :requestOptions,
    };
     return Entri;
}


export function useHandelUpload(e) {

}
/*
|--------------------------------------------------------------------------
| Initializes useUid 
|--------------------------------------------------------------------------
| Develover Tatiye.Net 2018
| @Date 9/2/2023 3:51:00 PM
*/
export function useUid() {
  const [person, setuid] = useState({});
  useEffect(() => {
    setUserData();
  }, []);
    const setUserData = async () => {
    const userData = await AsyncStorage.getItem('userData');
    const user= JSON.parse(userData);
     setuid(user);
    }
 return person;
}
export function locationDistance(lat1,lon1,lat2,lon2) {
  var R = 6371; // km (change this constant to get miles)
  var dLat = (lat2-lat1) * Math.PI / 180;
  var dLon = (lon2-lon1) * Math.PI / 180;
  var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180 ) * Math.cos(lat2 * Math.PI / 180 ) *
    Math.sin(dLon/2) * Math.sin(dLon/2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  var d = R * c;
  if (d>1) return Math.round(d)+"km";
  else if (d<=1) return Math.round(d*1000)+"m";
  return d;
}

export const fileLibrary = function () {
  const [reaRender, setTake] = useState();
  const [reaData, setData] = useState();
  const [reaPicCamera, setPicCamera] = useState(false);
  let cameraRef = useRef();
  const [hasCameraPermission, setHasCameraPermission] = useState();
  const [hasMediaLibraryPermission, setHasMediaLibraryPermission] = useState();
  const [type, setType] = useState(CameraType.back);
  useEffect(() => {
    (async () => {
      const cameraPermission = await Camera.requestCameraPermissionsAsync();
      const mediaLibraryPermission = await MediaLibrary.requestPermissionsAsync();
      setHasCameraPermission(cameraPermission.status === "granted");
      setHasMediaLibraryPermission(mediaLibraryPermission.status === "granted");
    })();
  }, []);
   let addPicCamera = async () => {
     let options = {
       aspect: [4, 3],
       quality: 0.75,
       base64: true,
       exif: false
     };
     let newPhoto = await cameraRef.current.takePictureAsync(options);
      setData('Camera');
      setTake(newPhoto);
      setPicCamera(true);
   };
   function cameraType() {
      setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));
    }
    return {
        Camera: function (red='') {
          setData('Camera');
          setPicCamera(false);
        },
        Galeri: async () => {
            let result = await ImagePicker.launchImageLibraryAsync({
              mediaTypes: ImagePicker.MediaTypeOptions.All,
              allowsEditing: true,
              aspect: [4, 3],
              quality: 0.75,
              base64: true,
              exif: false
            });
            if (!result.canceled) {
               setTake(result.assets[0]);
               setData('Galeri')
            }
        },
        data: function (red='') {
            return reaData  
        }, 
        renderCamera: function (red='') {
            return reaPicCamera  
        },
        render: function (red='') {
           if (red) {
             setTake(false);
             setData(false);
             setPicCamera(false);
           } else {
            return reaRender  
           }
        },
        CameraOpen: function (height=300) {
          var mines=(height-50)
          return (
            <View style={ {
               width:'100%',
               height:height
             }}>
             {!reaPicCamera &&(
               <View style={ {
               width:'100%',
               height:height
             }}>
              <Camera style={{flex: 1,width:'100%'}} type={type} ref={cameraRef}>

          <View style={{
            flexDirection: 'row',
            marginTop:(height-50),
            alignItems: 'center',
            justifyContent: 'flex-end', }
          }>
             
              <TouchableOpacity  onPress={cameraType}>
               <View style={{
                width: 48,
                height: 48,
                borderRadius: 9999,
                borderWidth: 1,
                borderColor: 'transparent',
                marginRight: 10,
                alignItems: 'center',
                justifyContent: 'center',
                backgroundColor:"#fd7e14"}}>
                <FeatherIcon color="#fff" name="maximize" size={20} />
               </View>
                </TouchableOpacity>
               <TouchableOpacity  onPress={addPicCamera}>
                  <View style={{
                   width: 48,
                   height: 48,
                   borderRadius: 9999,
                   borderWidth: 1,
                   borderColor: 'transparent',
                   marginRight: 10,
                   alignItems: 'center',
                   justifyContent: 'center',
                    backgroundColor:"#dc3545"}}>
                    <FeatherIcon color="#fff" name="camera" size={20} />
                  </View>
                </TouchableOpacity>
          </View>
              </Camera>
               </View>
              )}
             {reaPicCamera &&(
               <View style={ {
               width:'100%',
               height:height
             }}>
               <Image style={{height:height}} source={{ uri: "data:image/jpg;base64," + reaRender.base64 }} />
               </View>
              )}
            </View>
         )
        }


    }
}
